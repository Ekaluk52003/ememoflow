version: '3.9'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      SERVICE: web
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/media
    env_file:
      - .env
    depends_on:
      - db
      - redis
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  celery:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      SERVICE: celery
    volumes:
      - .:/code
      - static_volume:/code/staticfiles
      - media_volume:/code/media
    env_file:
      - .env
    depends_on:
      - db
      - redis
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      SERVICE: celery-beat
    volumes:
      - .:/code
      - static_volume:/code/staticfiles
      - media_volume:/code/media
    env_file:
      - .env
    depends_on:
      - db
      - redis
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${SQL_DATABASE}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  redis:
    image: redis:7-alpine
    env_file:
      - .env
    command: >
      --requirepass "${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    expose:
      - 6379
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  caddy:
    image: caddy:2
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - web
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  caddy_data:
  caddy_config:
